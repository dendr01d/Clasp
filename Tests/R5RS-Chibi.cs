using Clasp;

namespace Tests
{
    [TestClass]
    public class R5RS_Chibi
    {
        [TestMethod] public void Test_000() => Tester.TestIO(@"8", @"((lambda (x) (+ x x)) 4)");
        [TestMethod] public void Test_001() => Tester.TestIO(@"(3 4 5 6)", @"((lambda x x) 3 4 5 6)");
        [TestMethod] public void Test_002() => Tester.TestIO(@"(5 6)", @"((lambda (x y . z) z) 3 4 5 6)");
        [TestMethod] public void Test_003() => Tester.TestIO(@"yes", @"(if (> 3 2) 'yes 'no)");
        [TestMethod] public void Test_004() => Tester.TestIO(@"no", @"(if (> 2 3) 'yes 'no)");
        [TestMethod] public void Test_005() => Tester.TestIO(@"1", @"(if (> 3 2) (- 3 2) (+ 3 2))");
        [TestMethod] public void Test_006() => Tester.TestIO(@"greater", @"(cond ((> 3 2) 'greater) ((< 3 2) 'less))");
        [TestMethod] public void Test_007() => Tester.TestIO(@"equal", @"(cond ((> 3 3) 'greater) ((< 3 3) 'less) (else 'equal))");
        [TestMethod] public void Test_008() => Tester.TestIO(@"composite", @"(case (* 2 3) ((2 3 5 7) 'prime) ((1 4 6 8 9) 'composite))");
        [TestMethod] public void Test_009() => Tester.TestIO(@"consonant", @"(case (car '(c d)) ((a e i o u) 'vowel) ((w y) 'semivowel) (else 'consonant))");
        [TestMethod] public void Test_010() => Tester.TestIO(@"#t", @"(and (= 2 2) (> 2 1))");
        [TestMethod] public void Test_011() => Tester.TestIO(@"#f", @"(and (= 2 2) (< 2 1))");
        [TestMethod] public void Test_012() => Tester.TestIO(@"(f g)", @"(and 1 2 'c '(f g))");
        [TestMethod] public void Test_013() => Tester.TestIO(@"#t", @"(and)");
        [TestMethod] public void Test_014() => Tester.TestIO(@"#t", @"(or (= 2 2) (> 2 1))");
        [TestMethod] public void Test_015() => Tester.TestIO(@"#t", @"(or (= 2 2) (< 2 1))");
        [TestMethod] public void Test_016() => Tester.TestIO(@"(b c)", @"(or (memq 'b '(a b c)) (/ 3 0))");
        [TestMethod] public void Test_017() => Tester.TestIO(@"6", @"(let ((x 2) (y 3)) (* x y))");
        [TestMethod] public void Test_018() => Tester.TestIO(@"35", @"(let ((x 2) (y 3)) (let ((x 7) (z (+ x y))) (* z x)))");
        [TestMethod] public void Test_019() => Tester.TestIO(@"70", @"(let ((x 2) (y 3)) (let* ((x 7) (z (+ x y))) (* z x)))");
        [TestMethod] public void Test_020() => Tester.TestIO(@"-2", @"(let () (define x 2) (define f (lambda () (- x))) (f))");
        [TestMethod] public void Test_021() => Tester.TestIO(@"1", @"(begin (define let*-def 1) (let* () (define let*-def 2) #f))");
        [TestMethod] public void Test_022() => Tester.TestIO(@"#(0 1 2 3 4)", @"(do ((vec (make-vector 5)) (i 0 (+ i 1))) ((= i 5) vec) (vector-set! vec i i))");
        [TestMethod] public void Test_023() => Tester.TestIO(@"25", @"(let ((x '(1 3 5 7 9))) (do ((x x (cdr x)) (sum 0 (+ sum (car x)))) ((null? x) sum)))");
        [TestMethod] public void Test_024() => Tester.TestIO(@"((6 1 3) (-5 -2))", @"(let loop ((numbers '(3 -2 1 6 -5)) (nonneg '()) (neg '())) (cond ((null? numbers) (list nonneg neg)) ((>= (car numbers) 0) (loop (cdr numbers) (cons (car numbers) nonneg) neg)) ((< (car numbers) 0) (loop (cdr numbers) nonneg (cons (car numbers) neg)))))");
        [TestMethod] public void Test_025() => Tester.TestIO(@"(list 3 4)", @"`(list ,(+ 1 2) 4)");
        [TestMethod] public void Test_026() => Tester.TestIO(@"(list a 'a)", @"(let ((name 'a)) `(list ,name ',name))");
        [TestMethod] public void Test_027() => Tester.TestIO(@"(a 3 4 5 6 b)", @"`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)");
        [TestMethod] public void Test_028() => Tester.TestIO(@"(10 5 4 16 9 8)", @"`(10 5 ,(expt 2 2) ,@(map (lambda (n) (expt n 2)) '(4 3)) 8)");
        [TestMethod] public void Test_029() => Tester.TestIO(@"(a `(b ,(+ 1 2)", @",(foo 4 d) e) f) `(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)");
        [TestMethod] public void Test_030() => Tester.TestIO(@"(a `(b ,x ,'y d) e)", @"(let ((name1 'x) (name2 'y)) `(a `(b ,,name1 ,',name2 d) e))");
        [TestMethod] public void Test_031() => Tester.TestIO(@"(list 3 4)", @"(quasiquote (list (unquote (+ 1 2)) 4))");
        [TestMethod] public void Test_032() => Tester.TestIO(@"#t", @"(eqv? 'a 'a)");
        [TestMethod] public void Test_033() => Tester.TestIO(@"#f", @"(eqv? 'a 'b)");
        [TestMethod] public void Test_034() => Tester.TestIO(@"#t", @"(eqv? '() '())");
        [TestMethod] public void Test_035() => Tester.TestIO(@"#f", @"(eqv? (cons 1 2) (cons 1 2))");
        [TestMethod] public void Test_036() => Tester.TestIO(@"#f", @"(eqv? (lambda () 1) (lambda () 2))");
        [TestMethod] public void Test_037() => Tester.TestIO(@"#t", @"(let ((p (lambda (x) x))) (eqv? p p))");
        [TestMethod] public void Test_038() => Tester.TestIO(@"#t", @"(eq? 'a 'a)");
        [TestMethod] public void Test_039() => Tester.TestIO(@"#f", @"(eq? (list 'a) (list 'a))");
        [TestMethod] public void Test_040() => Tester.TestIO(@"#t", @"(eq? '() '())");
        [TestMethod] public void Test_041() => Tester.TestIO(@"#t", @"(eq? car car)");
        [TestMethod] public void Test_042() => Tester.TestIO(@"#t", @"(let ((x '(a))) (eq? x x))");
        [TestMethod] public void Test_043() => Tester.TestIO(@"#t", @"(let ((p (lambda (x) x))) (eq? p p))");
        [TestMethod] public void Test_044() => Tester.TestIO(@"#t", @"(equal? 'a 'a)");
        [TestMethod] public void Test_045() => Tester.TestIO(@"#t", @"(equal? '(a) '(a))");
        [TestMethod] public void Test_046() => Tester.TestIO(@"#t", @"(equal? '(a (b) c) '(a (b) c))");
        [TestMethod] public void Test_047() => Tester.TestIO(@"#t", @"(equal? ""abc"" ""abc"")");
        [TestMethod] public void Test_048() => Tester.TestIO(@"#f", @"(equal? ""abc"" ""abcd"")");
        [TestMethod] public void Test_049() => Tester.TestIO(@"#f", @"(equal? ""a"" ""b"")");
        [TestMethod] public void Test_050() => Tester.TestIO(@"#t", @"(equal? 2 2)");
        //[TestMethod] public void Test_051() => Tester.TestIO(@"#f", @"(equal? 2 2.0)"); //marked out
        //[TestMethod] public void Test_052() => Tester.TestIO(@"#f", @"(equal? 2.0 2)"); //marked out
        [TestMethod] public void Test_053() => Tester.TestIO(@"#t", @"(equal? (make-vector 5 'a) (make-vector 5 'a))");
        [TestMethod] public void Test_054() => Tester.TestIO(@"4", @"(max 3 4)");
        //[TestMethod] public void Test_055() => Tester.TestIO(@"4", @"(max 3.9 4)"); //marked out
        [TestMethod] public void Test_056() => Tester.TestIO(@"7", @"(+ 3 4)");
        [TestMethod] public void Test_057() => Tester.TestIO(@"3", @"(+ 3)");
        [TestMethod] public void Test_058() => Tester.TestIO(@"0", @"(+)");
        [TestMethod] public void Test_059() => Tester.TestIO(@"4", @"(* 4)");
        [TestMethod] public void Test_060() => Tester.TestIO(@"1", @"(*)");
        [TestMethod] public void Test_061() => Tester.TestIO(@"-1", @"(- 3 4)");
        [TestMethod] public void Test_062() => Tester.TestIO(@"-6", @"(- 3 4 5)");
        [TestMethod] public void Test_063() => Tester.TestIO(@"-3", @"(- 3)");
        [TestMethod] public void Test_064() => Tester.TestIO(@"-1.0", @"(- 3.0 4)");
        [TestMethod] public void Test_065() => Tester.TestIO(@"7", @"(abs -7)");
        [TestMethod] public void Test_066() => Tester.TestIO(@"1", @"(modulo 13 4)");
        [TestMethod] public void Test_067() => Tester.TestIO(@"1", @"(remainder 13 4)");
        [TestMethod] public void Test_068() => Tester.TestIO(@"3", @"(modulo -13 4)");
        [TestMethod] public void Test_069() => Tester.TestIO(@"-1", @"(remainder -13 4)");
        [TestMethod] public void Test_070() => Tester.TestIO(@"-3", @"(modulo 13 -4)");
        [TestMethod] public void Test_071() => Tester.TestIO(@"1", @"(remainder 13 -4)");
        [TestMethod] public void Test_072() => Tester.TestIO(@"-1", @"(modulo -13 -4)");
        [TestMethod] public void Test_073() => Tester.TestIO(@"-1", @"(remainder -13 -4)");
        [TestMethod] public void Test_074() => Tester.TestIO(@"4", @"(gcd 32 -36)");
        [TestMethod] public void Test_075() => Tester.TestIO(@"288", @"(lcm 32 -36)");
        [TestMethod] public void Test_076() => Tester.TestIO(@"100", @"(string->number ""100"")");
        [TestMethod] public void Test_077() => Tester.TestIO(@"256", @"(string->number ""100"" 16)");
        [TestMethod] public void Test_078() => Tester.TestIO(@"127", @"(string->number ""177"" 8)");
        [TestMethod] public void Test_079() => Tester.TestIO(@"5", @"(string->number ""101"" 2)");
        [TestMethod] public void Test_080() => Tester.TestIO(@"100.0", @"(string->number ""1e2"")");
        [TestMethod] public void Test_081() => Tester.TestIO(@"""100""", @"(number->string 100)");
        [TestMethod] public void Test_082() => Tester.TestIO(@"""100""", @"(number->string 256 16)");
        [TestMethod] public void Test_083() => Tester.TestIO(@"""ff""", @"(number->string 255 16)");
        [TestMethod] public void Test_084() => Tester.TestIO(@"""177""", @"(number->string 127 8)");
        [TestMethod] public void Test_085() => Tester.TestIO(@"""101""", @"(number->string 5 2)");
        [TestMethod] public void Test_086() => Tester.TestIO(@"#f", @"(not 3)");
        [TestMethod] public void Test_087() => Tester.TestIO(@"#f", @"(not (list 3))");
        [TestMethod] public void Test_088() => Tester.TestIO(@"#f", @"(not '())");
        [TestMethod] public void Test_089() => Tester.TestIO(@"#f", @"(not (list))");
        [TestMethod] public void Test_090() => Tester.TestIO(@"#f", @"(not '())");
        [TestMethod] public void Test_091() => Tester.TestIO(@"#f", @"(boolean? 0)");
        [TestMethod] public void Test_092() => Tester.TestIO(@"#f", @"(boolean? '())");
        [TestMethod] public void Test_093() => Tester.TestIO(@"#t", @"(pair? '(a . b))");
        [TestMethod] public void Test_094() => Tester.TestIO(@"#t", @"(pair? '(a b c))");
        [TestMethod] public void Test_095() => Tester.TestIO(@"(a)", @"(cons 'a '())");
        [TestMethod] public void Test_096() => Tester.TestIO(@"((a) b c d)", @"(cons '(a) '(b c d))");
        [TestMethod] public void Test_097() => Tester.TestIO(@"(""a"" b c)", @"(cons ""a"" '(b c))");
        [TestMethod] public void Test_098() => Tester.TestIO(@"(a . 3)", @"(cons 'a 3)");
        [TestMethod] public void Test_099() => Tester.TestIO(@"((a b) . c)", @"(cons '(a b) 'c)");
        [TestMethod] public void Test_100() => Tester.TestIO(@"a", @"(car '(a b c))");
        [TestMethod] public void Test_101() => Tester.TestIO(@"(a)", @"(car '((a) b c d))");
        [TestMethod] public void Test_102() => Tester.TestIO(@"1", @"(car '(1 . 2))");
        [TestMethod] public void Test_103() => Tester.TestIO(@"(b c d)", @"(cdr '((a) b c d))");
        [TestMethod] public void Test_104() => Tester.TestIO(@"2", @"(cdr '(1 . 2))");
        [TestMethod] public void Test_105() => Tester.TestIO(@"#t", @"(list? '(a b c))");
        [TestMethod] public void Test_106() => Tester.TestIO(@"#t", @"(list? '())");
        [TestMethod] public void Test_107() => Tester.TestIO(@"#f", @"(list? '(a . b))");
        [TestMethod] public void Test_108() => Tester.TestIO(@"#f", @"(let ((x (list 'a))) (set-cdr! x x) (list? x))");
        [TestMethod] public void Test_109() => Tester.TestIO(@"(a 7 c)", @"(list 'a (+ 3 4) 'c)");
        [TestMethod] public void Test_110() => Tester.TestIO(@"()", @"(list)");
        [TestMethod] public void Test_111() => Tester.TestIO(@"3", @"(length '(a b c))");
        [TestMethod] public void Test_112() => Tester.TestIO(@"3", @"(length '(a (b) (c d e)))");
        [TestMethod] public void Test_113() => Tester.TestIO(@"0", @"(length '())");
        [TestMethod] public void Test_114() => Tester.TestIO(@"(x y)", @"(append '(x) '(y))");
        [TestMethod] public void Test_115() => Tester.TestIO(@"(a b c d)", @"(append '(a) '(b c d))");
        [TestMethod] public void Test_116() => Tester.TestIO(@"(a (b) (c))", @"(append '(a (b)) '((c)))");
        [TestMethod] public void Test_117() => Tester.TestIO(@"(a b c . d)", @"(append '(a b) '(c . d))");
        [TestMethod] public void Test_118() => Tester.TestIO(@"a", @"(append '() 'a)");
        [TestMethod] public void Test_119() => Tester.TestIO(@"(c b a)", @"(reverse '(a b c))");
        [TestMethod] public void Test_120() => Tester.TestIO(@"((e (f)) d (b c) a)", @"(reverse '(a (b c) d (e (f))))");
        [TestMethod] public void Test_121() => Tester.TestIO(@"c", @"(list-ref '(a b c d) 2)");
        [TestMethod] public void Test_122() => Tester.TestIO(@"(a b c)", @"(memq 'a '(a b c))");
        [TestMethod] public void Test_123() => Tester.TestIO(@"(b c)", @"(memq 'b '(a b c))");
        [TestMethod] public void Test_124() => Tester.TestIO(@"#f", @"(memq 'a '(b c d))");
        [TestMethod] public void Test_125() => Tester.TestIO(@"#f", @"(memq (list 'a) '(b (a) c))");
        [TestMethod] public void Test_126() => Tester.TestIO(@"((a) c)", @"(member (list 'a) '(b (a) c))");
        [TestMethod] public void Test_127() => Tester.TestIO(@"(101 102)", @"(memv 101 '(100 101 102))");
        [TestMethod] public void Test_128() => Tester.TestIO(@"#f", @"(assq (list 'a) '(((a)) ((b)) ((c))))");
        [TestMethod] public void Test_129() => Tester.TestIO(@"((a))", @"(assoc (list 'a) '(((a)) ((b)) ((c))))");
        [TestMethod] public void Test_130() => Tester.TestIO(@"(5 7)", @"(assv 5 '((2 3) (5 7) (11 13)))");
        [TestMethod] public void Test_131() => Tester.TestIO(@"#t", @"(symbol? 'foo)");
        [TestMethod] public void Test_132() => Tester.TestIO(@"#t", @"(symbol? (car '(a b)))");
        [TestMethod] public void Test_133() => Tester.TestIO(@"#f", @"(symbol? ""bar"")");
        [TestMethod] public void Test_134() => Tester.TestIO(@"#t", @"(symbol? 'nil)");
        [TestMethod] public void Test_135() => Tester.TestIO(@"#f", @"(symbol? '())");
        [TestMethod] public void Test_136() => Tester.TestIO(@"""flying-fish""", @"(symbol->string 'flying-fish)");
        [TestMethod] public void Test_137() => Tester.TestIO(@"""Martin""", @"(symbol->string 'Martin)");
        [TestMethod] public void Test_138() => Tester.TestIO(@"""Malvina""", @"(symbol->string (string->symbol ""Malvina""))");
        [TestMethod] public void Test_139() => Tester.TestIO(@"#t", @"(string? ""a"")");
        [TestMethod] public void Test_140() => Tester.TestIO(@"#f", @"(string? 'a)");
        [TestMethod] public void Test_141() => Tester.TestIO(@"0", @"(string-length """")");
        [TestMethod] public void Test_142() => Tester.TestIO(@"3", @"(string-length ""abc"")");
        [TestMethod] public void Test_143() => Tester.TestIO(@"#\a", @"(string-ref ""abc"" 0)");
        [TestMethod] public void Test_144() => Tester.TestIO(@"#\c", @"(string-ref ""abc"" 2)");
        [TestMethod] public void Test_145() => Tester.TestIO(@"#t", @"(string=? ""a"" (string #\a))");
        [TestMethod] public void Test_146() => Tester.TestIO(@"#f", @"(string=? ""a"" (string #\b))");
        [TestMethod] public void Test_147() => Tester.TestIO(@"#t", @"(string<? ""a"" ""aa"")");
        [TestMethod] public void Test_148() => Tester.TestIO(@"#f", @"(string<? ""aa"" ""a"")");
        [TestMethod] public void Test_149() => Tester.TestIO(@"#f", @"(string<? ""a"" ""a"")");
        [TestMethod] public void Test_150() => Tester.TestIO(@"#t", @"(string<=? ""a"" ""aa"")");
        [TestMethod] public void Test_151() => Tester.TestIO(@"#t", @"(string<=? ""a"" ""a"")");
        [TestMethod] public void Test_152() => Tester.TestIO(@"#t", @"(string=? ""a"" (make-string 1 #\a))");
        [TestMethod] public void Test_153() => Tester.TestIO(@"#f", @"(string=? ""a"" (make-string 1 #\b))");
        [TestMethod] public void Test_154() => Tester.TestIO(@"""""", @"(substring ""abc"" 0 0)");
        [TestMethod] public void Test_155() => Tester.TestIO(@"""a""", @"(substring ""abc"" 0 1)");
        [TestMethod] public void Test_156() => Tester.TestIO(@"""bc""", @"(substring ""abc"" 1 3)");
        [TestMethod] public void Test_157() => Tester.TestIO(@"""abc""", @"(string-append ""abc"" """")");
        [TestMethod] public void Test_158() => Tester.TestIO(@"""abc""", @"(string-append """" ""abc"")");
        [TestMethod] public void Test_159() => Tester.TestIO(@"""abc""", @"(string-append ""a"" ""bc"")");
        [TestMethod] public void Test_160() => Tester.TestIO(@"#(0 (""Sue"" ""Sue"") ""Anna"")", @"(let ((vec (vector 0 '(2 2 2 2) ""Anna""))) (vector-set! vec 1 '(""Sue"" ""Sue"")) vec)");
        [TestMethod] public void Test_161() => Tester.TestIO(@"(dah dah didah)", @"(vector->list '#(dah dah didah))");
        [TestMethod] public void Test_162() => Tester.TestIO(@"#(dididit dah)", @"(list->vector '(dididit dah))");
        [TestMethod] public void Test_163() => Tester.TestIO(@"#t", @"(procedure? car)");
        [TestMethod] public void Test_164() => Tester.TestIO(@"#f", @"(procedure? 'car)");
        [TestMethod] public void Test_165() => Tester.TestIO(@"#t", @"(procedure? (lambda (x) (* x x)))");
        [TestMethod] public void Test_166() => Tester.TestIO(@"#f", @"(procedure? '(lambda (x) (* x x)))");
        [TestMethod] public void Test_167() => Tester.TestIO(@"#t", @"(call-with-current-continuation procedure?)");
        [TestMethod] public void Test_168() => Tester.TestIO(@"7", @"(call-with-current-continuation (lambda (k) (+ 2 5)))");
        [TestMethod] public void Test_169() => Tester.TestIO(@"3", @"(call-with-current-continuation (lambda (k) (+ 2 5 (k 3))))");
        [TestMethod] public void Test_170() => Tester.TestIO(@"7", @"(apply + (list 3 4))");
        [TestMethod] public void Test_171() => Tester.TestIO(@"(b e h)", @"(map cadr '((a b) (d e) (g h)))");
        [TestMethod] public void Test_172() => Tester.TestIO(@"(1 4 27 256 3125)", @"(map (lambda (n) (expt n n)) '(1 2 3 4 5))");
        [TestMethod] public void Test_173() => Tester.TestIO(@"(5 7 9)", @"(map + '(1 2 3) '(4 5 6))");
        [TestMethod] public void Test_174() => Tester.TestIO(@"#(0 1 4 9 16)", @"(let ((v (make-vector 5))) (for-each (lambda (i) (vector-set! v i (* i i))) '(0 1 2 3 4)) v)");
        [TestMethod] public void Test_175() => Tester.TestIO(@"3", @"(force (delay (+ 1 2)))");
        [TestMethod] public void Test_176() => Tester.TestIO(@"(3 3)", @"(let ((p (delay (+ 1 2)))) (list (force p) (force p)))");
        [TestMethod] public void Test_177() => Tester.TestIO(@"ok", @"(let ((else 1)) (cond (else 'ok) (#t 'bad)))");
        [TestMethod] public void Test_178() => Tester.TestIO(@"ok", @"(let ((=> 1)) (cond (#t => 'ok)))");
        [TestMethod] public void Test_179() => Tester.TestIO(@"(,foo)", @"(let ((unquote 1)) `(,foo))");
        [TestMethod] public void Test_180() => Tester.TestIO(@"(,@foo)", @"(let ((unquote-splicing 1)) `(,@foo))");
        [TestMethod] public void Test_181() => Tester.TestIO(@"ok", @"(let ((... 2)) (let-syntax ((s (syntax-rules () ((_ x ...) 'bad) ((_ . r) 'ok)))) (s a b c)))");
        [TestMethod] public void Test_182() => Tester.TestIO(@"ok", @"(let () (let-syntax () (define internal-def 'ok)) internal-def)");
        [TestMethod] public void Test_183() => Tester.TestIO(@"ok", @"(let () (letrec-syntax () (define internal-def 'ok)) internal-def)");
        [TestMethod] public void Test_184() => Tester.TestIO(@"(2 1)", @"((lambda () (let ((x 1)) (let ((y x)) (set! x 2) (list x y)))))");
        [TestMethod] public void Test_185() => Tester.TestIO(@"(2 2)", @"((lambda () (let ((x 1)) (set! x 2) (let ((y x)) (list x y)))))");
        [TestMethod] public void Test_186() => Tester.TestIO(@"(1 2)", @"((lambda () (let ((x 1)) (let ((y x)) (set! y 2) (list x y)))))");
        [TestMethod] public void Test_187() => Tester.TestIO(@"(2 3)", @"((lambda () (let ((x 1)) (let ((y x)) (set! x 2) (set! y 3) (list x y)))))");
        [TestMethod] public void Test_188() => Tester.TestIO(@"(a b c)", @"(let* ((path '()) (add (lambda (s) (set! path (cons s path))))) (dynamic-wind (lambda () (add 'a)) (lambda () (add 'b)) (lambda () (add 'c))) (reverse path))");
        [TestMethod] public void Test_189() => Tester.TestIO(@"(connect talk1 disconnect connect talk2 disconnect)", @"(let ((path '()) (c #f)) (let ((add (lambda (s) (set! path (cons s path))))) (dynamic-wind (lambda () (add 'connect)) (lambda () (add (call-with-current-continuation (lambda (c0) (set! c c0) 'talk1)))) (lambda () (add 'disconnect))) (if (< (length path) 4) (c 'talk2) (reverse path))))");
        [TestMethod] public void Test_190() => Tester.TestIO(@"2", @"(let-syntax ((foo (syntax-rules ::: () ((foo ... args :::) (args ::: ...))))) (foo 3 - 5))");
        [TestMethod] public void Test_191() => Tester.TestIO(@"(5 4 1 2 3)", @"(let-syntax ((foo (syntax-rules () ((foo args ... penultimate ultimate) (list ultimate penultimate args ...))))) (foo 1 2 3 4 5))");
    }
}
